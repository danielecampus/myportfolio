quotes = c(c(0.25,0.2,0.15, 0.1,0.05,0.1, 0.05, 0.1))
)
dani_assets <- list(
horizon = 30,
time_decay = 30/35, # horizon / ideal horizon (30 or 35 years)
assets = c(
"World Momentum",
"US Quality",
"World Health Care",
"EU Gov bonds 7-10y",
"EU Inflation-Linked",
"US Treasury",
"EU Overnight"),
quotes = c(0.3,0.25,0.15, 0.1,0.05,0.05, 0.1)
)
dani_data <- list(
horizon = 30,
time_decay = 30/35, # horizon / ideal horizon (30 or 35 years)
assets = c(
"World Momentum",
"US Quality",
"World Health Care",
"EU Gov bonds 7-10y",
"EU Inflation-Linked",
"US Treasury",
"EU Overnight"),
quotes = c(0.3,0.25,0.15, 0.1,0.05,0.05, 0.1)
)
sum(dani_data$quotes)
length(dani_data$assets)==length(dani_data$quotes)
anna_data$timeseries <- read_parquet(paste0(input_path, "data_ticker_df.parquet")) %>%
filter(Index == anna_data$assets)
setwd("C:/Users/danie/OneDrive/GitHub/myportfolio")
source("library.R")
setwd("C:/Users/danie/OneDrive/GitHub/myportfolio")
source("library.R")
setwd("C:/Users/danie/OneDrive/GitHub/myportfolio")
source("library.R")
install.packages(c("tidyverse", "purrr", "readr", "readxl", "openxlsx", "writexl", "yfFR", "ISIN", "rvest", "tidyquant", "nloptr"))
setwd("C:/Users/danie/OneDrive/GitHub/myportfolio")
source("library.R")
# install.packages(c("tidyverse", "purrr", "readr", "readxl", "openxlsx", "writexl", "yfFR", "ISIN", "rvest", "tidyquant", "nloptr"))
library(yfFR)
# install.packages(c("tidyverse", "purrr", "readr", "readxl", "openxlsx", "writexl", "yfFR", "ISIN", "rvest", "tidyquant", "nloptr"))
library(yfFR)
install.packages(yfFR)
library(tidyverse)
library(purrr)
library(readr)
library(readxl)
library(openxlsx)
library(writexl)
# library(ISIN)
library(rvest)
library(tidyquant)
library(quantmod)
# library(targets)
library(nloptr)
library(quadprog)
library(arrow)
install.packages("yfR")
# install.packages(c("tidyverse", "purrr", "readr", "readxl", "openxlsx", "writexl", "yfR", "ISIN", "rvest", "tidyquant", "nloptr"))
library(yfR)
setwd("C:/Users/danie/OneDrive/GitHub/myportfolio")
source("library.R")
install.packages("arrow")
library(arrow)
setwd("C:/Users/danie/OneDrive/GitHub/myportfolio")
source("functions.R")
input_path <- "C:/Users/danie/OneDrive/GitHub/myportfolio/input/"
output_path <- "C:/Users/danie/OneDrive/GitHub/myportfolio/output/"
source("library.R")
source("functions.R")
input_path <- "C:/Users/danie/OneDrive/GitHub/myportfolio/input/"
output_path <- "C:/Users/danie/OneDrive/GitHub/myportfolio/output/"
anna_data$timeseries <- read_parquet(paste0(input_path, "data_ticker_df.parquet")) %>%
filter(Index == anna_data$assets)
anna_data <- list(
horizon = 30,
time_decay = 30/35, # horizon / ideal horizon (30 or 35 years)
assets = c(
"MSCI World",
"US Quality",
"World Low Volatility",
"EU Gov bonds 7-10y",
"EU Inflation-Linked",
"EU Overnight",
"US Short Treasury",
"ETC GOLD"
),
quotes = c(0.15,0.15,0.10, 0.22,0.06,0.15, 0.05, 0.12)
)
sum(anna_data$quotes)
length(anna_data$assets)==length(anna_data$quotes)
anna_data$timeseries <- read_parquet(paste0(input_path, "data_ticker_df.parquet")) %>%
filter(Index %in% anna_data$assets)
anna_data$prices <- read_parquet(paste0(input_path, "data_returns.parquet")) %>%
filter(Index  %in% anna_data$assets)
anna_data$returns <- read_parquet(paste0(input_path, "data_prices.parquet")) %>%
filter(Index  %in% anna_data$assets)
View(anna_data)
View(anna_data[["timeseries"]])
anna_data$prices <- read_parquet(paste0(input_path, "data_returns.parquet"))
View(anna_data[["prices"]])
anna_data$prices <- read_parquet(paste0(input_path, "data_returns.parquet")) %>%
select(all_of(anna_data$assets))
View(anna_data[["prices"]])
chiara_data <- list(
horizon = 30,
time_decay = 30/35, # horizon / ideal horizon (30 or 35 years)
assets = c(
"World Momentum", # useful with time decay > 0.8
"US Quality",
"World Low Volatility",
"EU Gov bonds 7-10y",
"EU Inflation-Linked",
"EU Overnight",
"US Short Treasury",
"ETC GOLD"
),
quotes = c(0.25,0.2,0.15, 0.1,0.05,0.1, 0.05, 0.1)
)
sum(chiara_data$quotes)
length(chiara_data$assets)==length(chiara_data$quotes)
chiara_data$timeseries <- read_parquet(paste0(input_path, "data_ticker_df.parquet")) %>%
filter(Index %in% chiara_data$assets)
chiara_data$prices <- read_parquet(paste0(input_path, "data_returns.parquet")) %>%
select(all_of(chiara_data$assets))
chiara_data$returns <- read_parquet(paste0(input_path, "data_prices.parquet")) %>%
select(all_of(chiara_data$assets))
# analysis
chiara_data$ret_pure <- chiara_data$returns %>% select(-Dates) %>% as.data.frame()
View(chiara_data)
View(chiara_data[["returns"]])
chiara_data$prices <- read_parquet(paste0(input_path, "data_returns.parquet")) %>%
select(Dates, all_of(chiara_data$assets))
chiara_data$returns <- read_parquet(paste0(input_path, "data_prices.parquet")) %>%
select(Dates, all_of(chiara_data$assets))
View(chiara_data[["returns"]])
# analysis
chiara_data$ret_pure <- chiara_data$returns %>% select(-Dates) %>% as.data.frame()
# analysis
ret_pure <- chiara_data$returns %>% select(-Dates) %>% as.data.frame()
var_cov <- cov(ret_pure)
corr_matrix <- cor(ret_pure)
avg_returns <- ret_pure %>% summarise(across(everything(), mean))
# analysis
chiara_data$ret_pure <- chiara_data$returns %>% select(-Dates) %>% as.data.frame()
chiara_data$var_cov <- cov(chiara_data$ret_pure)
chiara_data$corr_matrix <- cor(chiara_data$ret_pure)
chiara_data$avg_returns <- chiara_data$ret_pure %>% summarise(across(everything(), mean))
# Var - ES
multiasset_VaR <- VaR(multiasset_sheet_returns, p = 0.95,  method = "historical", portfolio_method = "component", weights = multiasset_quotes)
# Var - ES
chiara_data$VaR <- VaR(chiara_data$returns, p = 0.95,  method = "historical", portfolio_method = "component", weights = multiasset_quotes)
# Var - ES
chiara_data$VaR <- VaR(chiara_data$returns, p = 0.95,  method = "historical", portfolio_method = "component", weights = chiara_data$quotes)
chiara_data$ES <- ES(chiara_data$returns, p = 0.95, method = "historical", portfolio_method = "component", weights = chiara_data$quotes)
cat("VaR Chiara portfolio:", round(chiara_data$VaR$hVaR*100, 1), "%", "\n")
cat("ES Chiara portfolio:", round(chiara_data$ES$`-r_exceed/c_exceed`*100, 1), "%", "\n")
# ptf analysis
chiara_data$ptf_output <- risk_portfolio(chiara_data$quotes, chiara_data$var_cov, chiara_data$avg_returns, chiara_data$ticker_df, chiara_data$returns)
source("functions.R")
# ptf analysis
chiara_data$ptf_output <- risk_portfolio(chiara_data$quotes, chiara_data$var_cov, chiara_data$avg_returns, chiara_data$assets, chiara_data$returns)
chiara_data$ptf_output$Ptf_Summary$Annual_Ret
View(chiara_data[["timeseries"]])
chiara_data <- list(
horizon = 30,
time_decay = 30/35, # horizon / ideal horizon (30 or 35 years)
assets = c(
"World Momentum", # useful with time decay > 0.8
"US Quality",
"World Low Volatility",
"EU Gov bonds 7-10y",
"EU Inflation-Linked",
"EU Overnight",
"US Short Treasury",
"ETC GOLD"
),
quotes = c(0.25,0.2,0.15, 0.1,0.05,0.1, 0.05, 0.1)
)
sum(chiara_data$quotes)
length(chiara_data$assets)==length(chiara_data$quotes)
chiara_data$tickers <- read_parquet(paste0(input_path, "data_ticker_df.parquet")) %>%
filter(Index %in% chiara_data$assets)
chiara_data$prices <- read_parquet(paste0(input_path, "data_returns.parquet")) %>%
select(Dates, all_of(chiara_data$assets))
chiara_data$returns <- read_parquet(paste0(input_path, "data_prices.parquet")) %>%
select(Dates, all_of(chiara_data$assets))
View(chiara_data[["returns"]])
chiara_data$tickers <- read_parquet(paste0(input_path, "data_ticker_df.parquet")) %>%
filter(Index %in% chiara_data$assets)
chiara_data$returns <- read_parquet(paste0(input_path, "data_returns.parquet")) %>%
select(Dates, all_of(chiara_data$assets))
chiara_data$prices <- read_parquet(paste0(input_path, "data_prices.parquet")) %>%
select(Dates, all_of(chiara_data$assets))
# analysis
chiara_data$ret_pure <- chiara_data$returns %>% select(-Dates) %>% as.data.frame()
chiara_data$var_cov <- cov(chiara_data$ret_pure)
chiara_data$corr_matrix <- cor(chiara_data$ret_pure)
chiara_data$avg_returns <- chiara_data$ret_pure %>% summarise(across(everything(), mean))
# Var - ES
chiara_data$VaR <- VaR(chiara_data$returns, p = 0.95,  method = "historical", portfolio_method = "component", weights = chiara_data$quotes)
chiara_data$ES <- ES(chiara_data$returns, p = 0.95, method = "historical", portfolio_method = "component", weights = chiara_data$quotes)
cat("VaR Chiara portfolio:", round(chiara_data$VaR$hVaR*100, 1), "%", "\n")
cat("ES Chiara portfolio:", round(chiara_data$ES$`-r_exceed/c_exceed`*100, 1), "%", "\n")
# ptf analysis
chiara_data$ptf_output <- risk_portfolio(chiara_data$quotes, chiara_data$var_cov, chiara_data$avg_returns, chiara_data$assets, chiara_data$returns)
chiara_data$ptf_output$Ptf_Summary$Annual_Ret
write_parquet(chiara_data$ptf_output$Ptf_Analysis, paste0(output_path, "chiara_analysis.parquet"))
write_parquet(chiara_dataptf_output$Ptf_Summary, paste0(output_path, "chiara_summary.parquet"))
write_parquet(chiara_data$ptf_output$Ptf_Summary, paste0(output_path, "chiara_summary.parquet"))
View(chiara_data[["ptf_output"]][["Ptf_Summary"]])
View(chiara_data[["ptf_output"]][["Ptf_Analysis"]])
plot_quotes(chiara_data$ptf_output$Ptf_Analysis$Assets, chiara_data$ptf_output$Ptf_Analysis$Quotes)
# plot
png(paste0(output_path, "gfx/chiara_plot_quotes.png"))
plot_quotes(chiara_data$ptf_output$Ptf_Analysis$Assets, chiara_data$ptf_output$Ptf_Analysis$Quotes)
dev.off()
plot_returns(chiara_data$ptf_output$Ptf_Analysis$Assets, (chiara_data$ptf_output$Ptf_Analysis$Ret_Avg + 1)^12 - 1, (chiara_data$ptf_output$Ptf_Analysis$Ret_Weighted + 1)^12 - 1)
png(paste0(output_path, "gfx/chiara_plot_returns.png"))
plot_returns(chiara_data$ptf_output$Ptf_Analysis$Assets, (chiara_data$ptf_output$Ptf_Analysis$Ret_Avg + 1)^12 - 1, (chiara_data$ptf_output$Ptf_Analysis$Ret_Weighted + 1)^12 - 1)
dev.off()
# open inputs
multiasset_ticker_df <- read_parquet(paste0(input_path, "data_ticker_df.parquet")) %>%
filter(Index %in% chiara_data$assets)
multiasset_sheet_prices <- read_parquet(paste0(input_path, "data_returns.parquet")) %>%
select(Dates, all_of(chiara_data$assets))
multiasset_sheet_returns <- read_parquet(paste0(input_path, "multiasset_sheet_returns.parquet")) %>%
select(Dates, all_of(chiara_data$assets))
# open inputs
multiasset_ticker_df <- read_parquet(paste0(input_path, "data_ticker_df.parquet")) %>%
filter(Index %in% chiara_data$assets)
multiasset_sheet_prices <- rread_parquet(paste0(input_path, "data_prices.parquet")) %>%
select(Dates, all_of(chiara_data$assets))
multiasset_sheet_prices <- read_parquet(paste0(input_path, "data_prices.parquet")) %>%
select(Dates, all_of(chiara_data$assets))
multiasset_sheet_returns <- read_parquet(paste0(input_path, "data_returns.parquet")) %>%
select(Dates, all_of(chiara_data$assets))
# analysis
ret_pure <- multiasset_sheet_returns %>% select(-Dates) %>% as.data.frame()
var_cov <- cov(ret_pure)
corr_matrix <- cor(ret_pure)
avg_returns <- ret_pure %>% summarise(across(everything(), mean))
# define quotes of each asset
anna_quotes <- chiara_data$quotes
sum(anna_quotes) # = 1
# monte carlo inputs
n_sim <- 10000
n_period <- 12
initial_value <- 10000
avg_returns_vector <- avg_returns %>% as.numeric() %>% as.vector()
# simulation of returns
set.seed(123)
simulated_returns <- MASS::mvrnorm(
n = n_sim * n_period,
mu = avg_returns_vector,
Sigma = var_cov
)
simulated_returns <- array(simulated_returns, dim =  c(n_sim, n_period, length(avg_returns_vector)))
portfolio_returns <-apply(simulated_returns, c(1,2), function(x) sum(x*anna_quotes))
# portfolio value
portfolio_values <- matrix(NA, nrow = n_sim, ncol = n_period)
portfolio_values[, 1] <- initial_value * (1 + portfolio_returns[, 1])
for (t in 2:n_period) {
portfolio_values[, t] <- portfolio_values[, t - 1] * (1 + portfolio_returns[, t])
}
final_values <- portfolio_values[, n_period]
mean_value <- mean(final_values)
expected_return <- mean_value / initial_value - 1
sd_value <- sd(final_values)
quantiles <- quantile(final_values, probs = c(0.05, 0.95))
# Output
cat("Valore medio simulato:", round(mean_value, 2), "\n")
cat("Simulated expected return after", n_period, "months:", round(expected_return*100, 2), "%", "\n")
cat("Deviazione standard del valore finale:", round(sd_value, 2), "\n")
cat("VaR 95% (percentile 5%):", round(quantiles[1], 2), "\n")
cat("Intervallo di confidenza 95%:", round(quantiles, 2), "\n")
# forecast
final_returns <- portfolio_returns[, n_period]
VaR_percent <- quantile(final_returns, probs = 0.05)
ES_percent <- mean(final_returns[final_returns <= VaR_percent])
VaR_percent <- VaR_percent * 100
ES_percent <- ES_percent * 100
cat("VaR:", round(VaR_percent, 2), "%\n")
cat("ES:", round(ES_percent, 2), "%\n")
# weighted returns
ret_pure <- multiasset_sheet_returns %>% arrange(Dates) %>% select(-Dates) %>% as.matrix()
historical_returns <- ret_pure %*% anna_quotes
historical_data <- data.frame(Dates = multiasset_sheet_returns$Dates) %>%
arrange(Dates) %>%
mutate(
Returns = historical_returns %>% as.vector(),
Cumulative_Value = 100 * cumprod(1 + historical_returns)
)
forecast_returns <- portfolio_returns[, 1:n_period]
forecast_cumulative <- matrix(NA, nrow = n_sim, ncol = n_period)
forecast_cumulative[, 1] <- tail(historical_data$Cumulative_Value, 1) * (1 + portfolio_returns[, 1])
for (t in 2:n_period) {
forecast_cumulative[, t] <- forecast_cumulative[, t - 1] * (1 + portfolio_returns[, t])
}
multiasset_forecast_summary <- data.frame(
Dates = seq.Date(from = max(historical_data$Dates) + 1, by = "month", length.out = n_period),
Mean = apply(forecast_cumulative, 2, mean),
P5 = apply(forecast_cumulative, 2, quantile, probs = 0.05),
P95 = apply(forecast_cumulative, 2, quantile, probs = 0.95)
)
multiasset_combined_data <- rbind(
data.frame(Dates = historical_data$Dates,
Mean = historical_data$Cumulative_Value,
P5 = NA,
P95 = NA),
multiasset_forecast_summary
) %>%
arrange(desc(Dates))
exp_ret <- max(multiasset_forecast_summary$Mean)/last(historical_data$Cumulative_Value)-1
ggplot(multiasset_combined_data, aes(x = Dates)) +
geom_line(aes(y = Mean), color = "blue", size = 1) +
geom_ribbon(data = multiasset_forecast_summary, aes(ymin = P5, ymax = P95), fill = "blue", alpha = 0.2) +
labs(
title = "Forecast of the multiasset portfolio returns",
subtitle = paste("t:", n_period, "months | E[R] =", round(exp_ret*100, 2), "% | VaR:", round(VaR_percent, 2), "% | ES:", round(ES_percent, 2), "%"),
x = "Dates",
y = "Portfolio Returns %"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
axis.title = element_text(size = 12)
)
10/35
named_list <- function(nome_lista, t, assets, quotes, input_path) {
# Creazione della lista con i dati forniti
nuova_lista <- list(
horizon = t,
time_decay = t/35, # horizon / ideal horizon (30 or 35 years)
assets = assets,
quotes = quotes,
)
nuova_lista$tickers <- read_parquet(paste0(input_path, "data_ticker_df.parquet")) %>%
filter(Index %in% nuova_lista$assets)
nuova_lista$returns <- read_parquet(paste0(input_path, "data_returns.parquet")) %>%
select(Dates, all_of(nuova_lista$assets))
nuova_lista$prices <- read_parquet(paste0(input_path, "data_prices.parquet")) %>%
select(Dates, all_of(nuova_lista$assets))
nuova_lista$ret_pure <- nuova_lista$returns %>% select(-Dates) %>% as.data.frame()
nuova_lista$var_cov <- cov(nuova_lista$ret_pure)
nuova_lista$corr_matrix <- cor(nuova_lista$ret_pure)
nuova_lista$avg_returns <- nuova_lista$ret_pure %>% summarise(across(everything(), mean))
nuova_lista$VaR <- VaR(nuova_lista$returns, p = 0.95,  method = "historical", portfolio_method = "component", weights = nuova_lista$quotes)
nuova_lista$ES <- ES(nuova_lista$returns, p = 0.95, method = "historical", portfolio_method = "component", weights = nuova_lista$quotes)
nuova_lista$ptf_output <- risk_portfolio(nuova_lista$quotes, nuova_lista$var_cov, nuova_lista$avg_returns, nuova_lista$assets, nuova_lista$returns)
# Assegna la lista a una variabile con il nome fornito
assign(nome_lista, nuova_lista, envir = .GlobalEnv)
return(nuova_lista)
}
###########################
# CHIARA
chiara_assets <- c(
"World Momentum", # useful with time decay > 0.8
"US Quality",
"World Low Volatility",
"EU Gov bonds 7-10y",
"EU Inflation-Linked",
"EU Overnight",
"US Short Treasury",
"ETC GOLD"
)
chiara_quotes <- c(0.25,0.2,0.15, 0.1,0.05,0.1, 0.05, 0.1)
###########################
# CHIARA
chiara_input <- list(
t = 30,
assets = c(
"World Momentum", # useful with time decay > 0.8
"US Quality",
"World Low Volatility",
"EU Gov bonds 7-10y",
"EU Inflation-Linked",
"EU Overnight",
"US Short Treasury",
"ETC GOLD"),
quotes = c(0.25,0.2,0.15, 0.1,0.05,0.1, 0.05, 0.1)
)
###########################
# CHIARA
chiara_input <- list(
name = "chiara_data",
t = 30,
assets = c(
"World Momentum", # useful with time decay > 0.8
"US Quality",
"World Low Volatility",
"EU Gov bonds 7-10y",
"EU Inflation-Linked",
"EU Overnight",
"US Short Treasury",
"ETC GOLD"),
quotes = c(0.25,0.2,0.15, 0.1,0.05,0.1, 0.05, 0.1)
)
###########################
# CHIARA
chiara_input <- list(
name = "chiara_data",
t = 30,
assets = c(
"World Momentum", # useful with time decay > 0.8
"US Quality",
"World Low Volatility",
"EU Gov bonds 7-10y",
"EU Inflation-Linked",
"EU Overnight",
"US Short Treasury",
"ETC GOLD"),
quotes = c(0.25,0.2,0.15, 0.1,0.05,0.1, 0.05, 0.1)
)
named_list(chiara_input$name, chiara_input$t, chiara_input$assets, chiara_input$quotes, input_path)
named_list <- function(nome_lista, t, assets, quotes, input_path) {
# Creazione della lista con i dati forniti
nuova_lista <- list(
horizon = t,
time_decay = t/35, # horizon / ideal horizon (30 or 35 years)
assets = assets,
quotes = quotes
)
nuova_lista$tickers <- read_parquet(paste0(input_path, "data_ticker_df.parquet")) %>%
filter(Index %in% nuova_lista$assets)
nuova_lista$returns <- read_parquet(paste0(input_path, "data_returns.parquet")) %>%
select(Dates, all_of(nuova_lista$assets))
nuova_lista$prices <- read_parquet(paste0(input_path, "data_prices.parquet")) %>%
select(Dates, all_of(nuova_lista$assets))
nuova_lista$ret_pure <- nuova_lista$returns %>% select(-Dates) %>% as.data.frame()
nuova_lista$var_cov <- cov(nuova_lista$ret_pure)
nuova_lista$corr_matrix <- cor(nuova_lista$ret_pure)
nuova_lista$avg_returns <- nuova_lista$ret_pure %>% summarise(across(everything(), mean))
nuova_lista$VaR <- VaR(nuova_lista$returns, p = 0.95,  method = "historical", portfolio_method = "component", weights = nuova_lista$quotes)
nuova_lista$ES <- ES(nuova_lista$returns, p = 0.95, method = "historical", portfolio_method = "component", weights = nuova_lista$quotes)
nuova_lista$ptf_output <- risk_portfolio(nuova_lista$quotes, nuova_lista$var_cov, nuova_lista$avg_returns, nuova_lista$assets, nuova_lista$returns)
# Assegna la lista a una variabile con il nome fornito
assign(nome_lista, nuova_lista, envir = .GlobalEnv)
return(nuova_lista)
}
named_list(chiara_input$name, chiara_input$t, chiara_input$assets, chiara_input$quotes, input_path)
View(chiara_data)
View(chiara_data[["ptf_output"]][["Ptf_Analysis"]])
View(chiara_data[["ptf_output"]][["Ptf_Summary"]])
cat("VaR Chiara portfolio:", round(chiara_data$VaR$hVaR*100, 1), "%", "\n")
cat("ES Chiara portfolio:", round(chiara_data$ES$`-r_exceed/c_exceed`*100, 1), "%", "\n")
cat("Expected Return Chiara portfolio:", round(chiara_data$ptf_output$Ptf_Summary$Annual_Ret*100, 1), "%", "\n")
anna_input <- list(
t = 30,
assets = c(
"MSCI World",
"US Quality",
"World Low Volatility",
"EU Gov bonds 7-10y",
"EU Inflation-Linked",
"EU Overnight",
"US Short Treasury",
"ETC GOLD"
),
quotes = c(0.15,0.15,0.10, 0.22,0.06,0.15, 0.05, 0.12)
)
named_list(anna_input$name, anna_input$t, anna_input$assets, anna_input$quotes, input_path)
anna_input <- list(
name = "anna_data",
t = 30,
assets = c(
"MSCI World",
"US Quality",
"World Low Volatility",
"EU Gov bonds 7-10y",
"EU Inflation-Linked",
"EU Overnight",
"US Short Treasury",
"ETC GOLD"
),
quotes = c(0.15,0.15,0.10, 0.22,0.06,0.15, 0.05, 0.12)
)
named_list(anna_input$name, anna_input$t, anna_input$assets, anna_input$quotes, input_path)
named_list(anna_input$name, anna_input$t, anna_input$assets, anna_input$quotes, input_path)
cat("Expected Return Anna portfolio:", round(anna_data$ptf_output$Ptf_Summary$Annual_Ret*100, 1), "%", "\n")
cat("VaR Anna:", round(anna_data$VaR$hVaR*100, 1), "%", "\n")
cat("ES Anna:", round(anna_data$ES$`-r_exceed/c_exceed`*100, 1), "%", "\n")
write_parquet(anna_data$ptf_output$Ptf_Analysis, paste0(output_path, "anna_analysis.parquet"))
write_parquet(anna_data$ptf_output$Ptf_Summary, paste0(output_path, "anna_summary.parquet"))
plot_quotes(anna_data$ptf_output$Ptf_Analysis$Assets, anna_data$ptf_output$Ptf_Analysis$Quotes)
anna_input <- list(
name = "anna_data",
t = 30,
assets = c(
"MSCI World",
"US Quality",
"World Low Volatility",
"EU Gov bonds 7-10y",
"EU Inflation-Linked",
"EU Overnight",
"US Short Treasury",
"ETC GOLD"
),
quotes = c(0.30,0.15,0.10, 0.15, 0.05,0.1, 0.05, 0.1)
)
named_list(anna_input$name, anna_input$t, anna_input$assets, anna_input$quotes, input_path)
cat("Expected Return Anna portfolio:", round(anna_data$ptf_output$Ptf_Summary$Annual_Ret*100, 1), "%", "\n")
cat("VaR Anna:", round(anna_data$VaR$hVaR*100, 1), "%", "\n")
cat("ES Anna:", round(anna_data$ES$`-r_exceed/c_exceed`*100, 1), "%", "\n")
write_parquet(anna_data$ptf_output$Ptf_Analysis, paste0(output_path, "anna_analysis.parquet"))
write_parquet(anna_data$ptf_output$Ptf_Summary, paste0(output_path, "anna_summary.parquet"))
plot_quotes(anna_data$ptf_output$Ptf_Analysis$Assets, anna_data$ptf_output$Ptf_Analysis$Quotes)
plot_returns(anna_data$ptf_output$Ptf_Analysis$Assets, (anna_data$ptf_output$Ptf_Analysis$Ret_Avg + 1)^12 - 1, (anna_data$ptf_output$Ptf_Analysis$Ret_Weighted + 1)^12 - 1)
