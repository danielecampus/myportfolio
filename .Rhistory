N<-5000
Y <- rep(0,N)
for(i in 1:N){
Y[i] <- Y.sim()
}
freq <- table(Y)/N
p <- rep(0, length(freq))
for(i in 1:length(freq)){
p[i]<-1/(i*(i+1))
}
x <- 1:length(freq)
plot(x+0.05,p, type = "h", col = "red", lwd = 2, xlim=c(1,10),
xaxt = "n", xlab = "x", ylab = "freq")
axis(1, at = x)
lines(x-0.05, table(Y)/N, type = "h", lwd = 2) # or compute freq with a for loop
lines(x-0.05, table(Y)/N, type = "h", lwd = 2) # or compute freq with a for loop
legend("topright",legend = c("Observed", "Theoretical"),
col = c(1,2), lty = c(1,1), lwd = c(2,2), bty = "n")
title("Simulation study")
lines(x-0.05, freq, type = "h", lwd = 2) # or compute freq with a for loop
x <- 1:length(freq)
plot(x+0.05,p, type = "h", col = "red", lwd = 2, xlim=c(1,10),
xaxt = "n", xlab = "x", ylab = "freq")
axis(1, at = x)
lines(x-0.05, freq, type = "h", lwd = 2) # or compute freq with a for loop
legend("topright",legend = c("Observed", "Theoretical"),
col = c(1,2), lty = c(1,1), lwd = c(2,2), bty = "n")
help("lines")
help("plot")
X.sim <- function(){
U<-runif(1)
while(U<p1) {X<-2.5}
else if (U<p1+p2){X<-4.1}
else if (U<p1+p2+p3){X<-0.1}
else {X<--3.2}
return(X)
}
X.sim <- function(){
U<-runif(1)
while(U<p1) {X<-2.5}
else if (U<p1+p2){X<-4.1}
else if (U<p1+p2+p3){X<-0.1}
else {X<--3.2}
return(X)
}
X.sim <- function(){
U<-runif(1)
while(U<p1) {X<-2.5
else if (U<p1+p2){X<-4.1}
else if (U<p1+p2+p3){X<-0.1}
else {X<--3.2}
}
return(X)
}
X.sim <- function(){
U<-runif(1)
while(U<p1) {X<-2.5
else if (U<p1+p2){X<-4.1
else if (U<p1+p2+p3){X<-0.1
else {X<--3.2}
}
}
}
return(X)
}
N <- 1000
X <- rep(0,N)
p1 <- 0.69
p2 <- 0.17
p3 <- 0.1
p4 <- 0.04
X.sim <- function(){
U<-runif(1)
while(U<p1) {X<-2.5
else if (U<p1+p2){X<-4.1
else if (U<p1+p2+p3){X<-0.1
else {X<--3.2}
}
}
}
return(X)
}
X.sim <- function() {
U<-runif(1)
if(U<p1) {X<-2.5
else if (U<p1+p2){X<-4.1
else if (U<p1+p2+p3){X<-0.1
else {X<--3.2}
}
}
}
return(X)
}
X.sim <- function() {
U<-runif(1)
if(U<p1) {X<-2.5
}
else if (U<p1+p2){X<-4.1
}
else if (U<p1+p2+p3){X<-0.1
}
else {X<--3.2
}
return(X)
}
### Ex 5)
N <- 1000
X <- rep(0,N)
p1 <- 0.69
### Ex 5)
N <- 1000
# X <- rep(0,N)
p1 <- 0.69
p2 <- 0.17
p3 <- 0.1
p4 <- 0.04
X.sim <- function() {
U<-runif(1)
if(U<p1) {X<-2.5
}
else if (U<p1+p2){X<-4.1
}
else if (U<p1+p2+p3){X<-0.1
}
else {X<--3.2
}
return(X)
}
X <- rep(0,N)
for(i in 1:N){
X[i]<-X.sim()
}
freq <- table(X)/N
N <- 1000
p1 <- 0.69
p2 <- 0.17
p3 <- 0.1
p4 <- 0.04
X.sim <- function() {
U<-runif(1)
if(U<p1) {X<-2.5
}
else if (U<p1+p2){X<-4.1
}
else if (U<p1+p2+p3){X<-0.1
}
else {X<--3.2
}
return(X)
}
X <- rep(0,N)
for(i in 1:N){
X[i]<-X.sim()
}
freq <- table(X)/N
p <- c(0.69, 0.17, 0.1, 0.04)
x <- 1:length(freq)
plot(x+0.05,p,type = "h", col = "red", lwd = 2, xlim=c(1,length(freq)),
xaxt = "n", xlab = "x", ylab = "freq")
axis(1, at = x)
lines(x-0.05, table(X)/N, type = "h", lwd = 2) # or compute freq with a for loop
legend("topright",legend = c("Observed", "Theoretical"),
col = c(1,2), lty = c(1,1), lwd = c(2,2), bty = "n")
title("Simulation study")
### Exercise 10)
f <- function(x) (6*x*(1-x))
N <- 5000
X <- rep(0,N)
num.iter <- rep(0,N)
for(i in 1:N){
U <- 1
prob.accept <- 0
while (U>=prob.accept){
U <- runif(1)
Y <- runif(1)
prob.accept <- 4*Y*(1-Y)
num.iter[i] <- num.iter[i]+1
}
X[i]<-Y
}
x <- seq(0,1,length=101)
y.max <- max(dbeta(x,shape=2,rate=2))
y.max
x <- seq(0,1,0.01)
y.max <- max(dbeta(x,shape=2,rate=2))
y.max <- max(dbeta(x,2,2))
y.max
hist(X,prob=T, ylim=c(0,y.max))
curve(dbeta(x,2,2),add=T,col='red')
hist(X,prob=T, ylim=c(0,y.max),breaks=50,cex=0.5)
hist(X,prob=T, ylim=c(0,y.max),breaks=20,cex=0.5)
curve(dbeta(x,2,2),add=T,col='red')
f <- function(x) 10/x^2*(x>10)
cdf.F <- function(x) (1-10/x)*(x>10)
F.inv <- function(u) 10/(1-u)
x<- seq(0, 100, 0.1)
plot(x,f(x), type='l')
N<-10000
set.seed(1)
U<-runif(N)
X<-F.inv(U)
plot(ecdf(X),xlim=c(0,100))
curve(cdf.F(x),add=T, col="red")
## c.a) Importance sampling with truncated exponential envelope
# Simulate from Phi
dphi <- function(x)(exp(20-x)*(x>20))
curve(dphi(x),10,50, col="red")
Phi<- function(x)((1-exp(20-x))*(x>20))
Phi.inv<- function(u)(20-log(1-u))
curve(Phi(x),10,50, col="red")
N<-10000
set.seed(1)
U<-runif(N)
X<-Phi.inv(U)
length(table(X)/N)
plot(ecdf(X))
curve(Phi(x),add=T, col="red")
hist(X,prob=T)
curve(dphi(x),add=T, col="red")
legend("topright",c("histogram","theoretical"),lty=c(1,1),
col=c(1,"red"),bty="n")
# Compute the Importance sampling estimator
ratio <- f(X)/dphi(X)
plot(x,f(x), type='l')
lines(x,dphi(x), col =2)
plot(x,f(x)/dphi(x))
theta.hat <- mean(ratio)
theta.hat
# why so different?
integrate(f,20,Inf)
5
plot(x,f(x)/dphi(x))
plot(X,f(X)/dphi(X))
## c.b) Importance sampling with h(x) proportional to 1/(1+x^2), x>20
# Simulate from H
# Normalization constant
c <- 1/(pi/2-atan(20))
h <- function(x)(c/(1+x^2)*(x>20))
curve(h(x),10,100, col="red")
H<- function(x)c*(atan(x)-atan(20))*(x>20)
curve(H(x),10,1000, col="red")
H.inv<- function(u)tan(atan(20)+u/c)
U <- runif(N) #f4, inverse transform method
X <- H.inv(U)
plot(ecdf(X),xlim=c(0,100))
curve(H(x),add=T, col="red")
plot(x,f(x), type='l')
U <- runif(N) #f4, inverse transform method
lines(x,h(x), col =2)
plot(x,f(x)/h(x))
ratio <- f(X) / h(X)
theta.hat.2 <- mean(ratio)
theta.hat.2
### Exercise 17)
F.inv <- function(u) (sqrt(2)*tan(u*atan(1/sqrt(2))))
N <- 5000
set.seed(10)
U <- runif(N)
X <- F.inv(U)
g <- function(x) (exp((-x^2)/2))
f <- function(x) (1/(sqrt(2)*atan(1/sqrt(2)*(1+(x^2)/2))))
F.inv <- function(u) (sqrt(2)*tan(u*atan(1/sqrt(2))))
N <- 5000
set.seed(10)
U <- runif(N)
X <- F.inv(U)
ratio <- g(X)/f(X)
theta.hat <- mean(ratio)
theta.hat
x<- seq(0, 1, 0.01)
plot(x, g(x), type = "l", main = "", ylab = "", ylim = c(0,2), lwd = w)
plot(x, g(x), type = "l", main = "", ylab = "", ylim = c(0,2))
lines(x, g(x)/g(x), col = 2, lwd = w, lty =2)
lines(x, g(x)/g(x), col = 2, lty =2)
lines(x, g(x)/f(x), col = 3, lty =2)
legend("topright", legend = c("g", 0:1),
col = 1:3, lwd = w)
legend("topright", legend = c("g", 0:1),
col = 1:3)
w <- 2
plot(x, g(x), type = "l", main = "", ylab = "", lwd=w, ylim = c(0,2))
lines(x, g(x)/g(x), col = 2, lwd=w, lty =2)
lines(x, g(x)/f(x), col = 3, lwd=w, lty =2)
legend("topright", legend = c("g", 0:1),
col = 1:3)
legend("topright", legend = c("g", 0:1),
col = 1:3, lwd=w)
legend("topright", legend = c("g", "g/g", "g/f"),
col = 1:3, lwd=w)
g <- function(x) (exp((-x^2)/2))
f <- function(x) (1/(sqrt(2)*atan(1/sqrt(2)*(1+(x^2)/2))))
F.inv <- function(u) (sqrt(2)*tan(u*atan(1/sqrt(2))))
N <- 5000
set.seed(1)
U <- runif(N)
X <- F.inv(U)
ratio <- g(X)/f(X)
theta.hat <- mean(ratio)
theta.hat
x<- seq(0, 1, 0.01)
w <- 2
plot(x, g(x), type = "l", main = "", ylab = "", lwd=w, ylim = c(0,2))
lines(x, g(x)/g(x), col = 2, lwd=w, lty =2)
lines(x, g(x)/f(x), col = 3, lwd=w, lty =2)
legend("topright", legend = c("g", "g/g", "g/f"),
col = 1:3, lwd=w)
### Exercise 17)
g <- function(x) (exp((-x^2)/2))
f <- function(x) (1/(sqrt(2)*atan(1/sqrt(2))*(1+(x^2)/2)))
F.inv <- function(u) (sqrt(2)*tan(u*atan(1/sqrt(2))))
N <- 5000
set.seed(1)
U <- runif(N)
X <- F.inv(U)
ratio <- g(X)/f(X)
theta.hat <- mean(ratio)
theta.hat
x<- seq(0, 1, 0.01)
w <- 2
plot(x, g(x), type = "l", main = "", ylab = "", lwd=w, ylim = c(0,2))
lines(x, g(x)/g(x), col = 2, lwd=w, lty =2)
lines(x, g(x)/f(x), col = 3, lwd=w, lty =2)
legend("topright", legend = c("g", "g/g", "g/f"),
col = 1:3, lwd=w)
### Exercise 17)
g <- function(x) (exp(-(x^2)/2))
f <- function(x) (1/(sqrt(2)*atan(1/sqrt(2))*(1+(x^2)/2)))
F.inv <- function(u) (sqrt(2)*tan(u*atan(1/sqrt(2))))
N <- 5000
set.seed(1)
U <- runif(N)
X <- F.inv(U)
ratio <- g(X)/f(X)
theta.hat <- mean(ratio)
theta.hat
### Exercise 14)
p <- rep(c(0.11,0.09),5) # target p.m.f.
p
help("!=")
1 != 0
1 != 1
2!=1
1!=2
N <- 10000
set.seed(1)
U_1 <- runif(N)
set.seed(2)
U_2 <- runif(N)
X1 <- (U_1<0.55)*(2*floor(5*U_2)+5)
X2 <- (U_1>=0.55)*(2*floor(5*U_2)+6)
X <- c(X1[X1 != 0], X2[X2 != 0]) # != è il diverso
N <- 100
set.seed(1)
U_1 <- runif(N)
set.seed(2)
U_2 <- runif(N)
X1 <- (U_1<0.55)*(2*floor(5*U_2)+5)
X2 <- (U_1>=0.55)*(2*floor(5*U_2)+6)
X <- c(X1[X1 != 0], X2[X2 != 0]) # != è il diverso
X
X1
X2
for(i in 1:N){
for (j in 1:length(theta)) {
if (U[i]<cumsum(theta[j])){
X[i] <- rgamma(1,3,lambda[j])
}
}
}
N <- 5000
lambda = c(1,1.5,2,2.5,3)
theta = c(0.1,0.2,0.2,0.3,0.2)
set.seed(1)
U<-runif(N)
X <- rep(0,N)
for(i in 1:N){
for (j in 1:length(theta)) {
if (U[i]<cumsum(theta[j])){
X[i] <- rgamma(1,3,lambda[j])
}
}
}
X
x <- seq(0,10,0.1)
hist(X,probability = T,breaks=50, cex=0.5)
for (j in 1:length(theta)){
lines(x,cumsum(dgamma(x,3,lambda[j]),add=T,col='red',lwd=2))
}
for (j in 1:length(theta)){
lines(x,cumsum(dgamma(x,3,lambda(j)),add=T,col='red',lwd=2))
}
for(i in 1:N){
for (j in 1:length(theta)) {
if (U[i]< theta[j]+theta[j-1]+theta[j-2]+theta[j-3]+theta[j-4]){
X[i] <- rgamma(1,3,lambda[j])
}
}
}
for(i in 1:N){
for (j in 1:length(theta)) {
if (U[i]< (theta[j]+theta[j-1]+theta[j-2]+theta[j-3]+theta[j-4])){
X[i] <- rgamma(1,3,lambda[j])
}
}
}
x <- seq(0,10,0.1)
hist(X,probability = T,breaks=50, cex=0.5)
for (j in 1:length(theta)){
lines(x,cumsum(dgamma(x,3,lambda[j]),add=T,col='red',lwd=2))
}
lines(x,cumsum(dgamma(x,3,lambda[1:j]),add=T,col='red',lwd=2))
for (j in 1:5){
lines(x,cumsum(dgamma(x,3,lambda[1:j]),add=T,col='red',lwd=2))
}
for (i in 1:N){
if(U[i]<0.1){
X[i]<-rgamma(1,3,lambda[1])
}else if(U[i]<0.3){
X[i]<-rgamma(1,3,lambda[2])
}else if(U[i]<0.5){
X[i]<- rgamma(1,3,lambda[3])
} else if(U[i]<0.8){
X[i]<-rgamma(1,3,lambda[4])
}else{
X[i]<-rgamma(1,3,lambda[5])
}
}
x <- seq(0,20, 0.01)
hist(X, prob=TRUE,breaks=50)
lines(x, 1/10*dgamma(x,3,lambda[1])
+ 2/10*dgamma(y,3,lambda[2])
+ 2/10*dgamma(y,3,lambda[3])
+ 3/10*dgamma(y,3,lambda[4])
+ 2/10*dgamma(y,3,lambda[5]),col="red")
lines(x, 1/10*dgamma(x,3,lambda[1])
+ 2/10*dgamma(x,3,lambda[2])
+ 2/10*dgamma(x,3,lambda[3])
+ 3/10*dgamma(x,3,lambda[4])
+ 2/10*dgamma(x,3,lambda[5]),col="red")
## GUMBEL
N <- 2000
th <- 2
f <- function(w, th) {
w * (1 - log(w) / th)
}
find.u2 <- function(v) {
r <- function(w) f(w, th) - v  # Finv = v  <=>  Finv - v = 0
return(uniroot(r, c(0.000001, 0.99999))$root) # trovo valore di v che mi dia 0
}
# Step 1) Generate v_1, v_2 from U(0,1)
V <- matrix(runif(N * 2), N)
dim(V)
# Step 2) Compute u_1, and u_2
V[, 2] <- sapply(V[, 2], find.u2)
U <- cbind(exp(V[, 1]^(1 / th) * log(V[, 2])), exp((1 - V[, 1])^(1 / th) * log(V[, 2])))
plot(U, pch = 16, cex = 0.5)
## CLAYTON
# Bivariate Pareto with Clayton-copula
th <- seq(0, 10, 0.1)
#
N <- 2000
th <- 1.5
# STEP 1) Generate v_1, v_2 from U(0,1)
V <- matrix(runif(N*2),N)
dim(V)
# STEP 2) Compute u_1, u_2
U <- V
U[,2] <- (V[,1]^(-th)*(V[,2]^(-th/(th+1))-1)+1)^(-1/th)
plot(U, pch=16, cex=0.5)
# STEP 3) Pareto margins
Finv <- function(u, theta, a) theta*u^(-1/a)
theta <- 5
a <- 3
# with these parameters and the chosen th, we get a correlation of 0.79
# very high with th<-6, theta<-8, a<-3 : corr=0.9
X <- Finv(U, theta, a)
cor(X)
plot(X, pch=16, cex=0.5)
setwd("C:/Users/danie/OneDrive/GitHub")
setwd("C:/Users/danie/OneDrive/GitHub/myportfolio")
anna_data <- list(
assets = c(
"MSCI World",
"US Quality",
"World Low Volatility",
"EU Gov bonds 7-10y",
"EU Inflation-Linked",
"EU Overnight",
"US Short Treasury",
"ETC GOLD"
),
quotes = c(0.15,0.15,0.10, 0.22,0.06,0.15, 0.05, 0.12)
)
sum(anna_data$quotes)
length(anna_data)==length(anna_data$quotes)
length(anna_data)
length(anna_data$assets)==length(anna_data$quotes)
chiara_data <- list(
assets = c(
"World Momentum",
"US Quality",
"World Health Care",
"EU Gov bonds 7-10y",
"EU Inflation-Linked",
"EU Overnight",
"US Short Treasury",
"ETC GOLD"
),
quotes = c(c(0.25,0.2,0.15, 0.1,0.05,0.1, 0.05, 0.1))
)
sum(chiara_data$quotes)
length(chiara_data$assets)==length(chiara_data$quotes)
